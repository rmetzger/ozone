---
layout: documentation
---
Weblog Analysis
===============

Task Description
----------------

The Weblog Analysis example shows how analyzing relational data can be
done with the help of the [PACT Programming
Model](pactpm.html "pactpm").
In this case a scenario is considered where the log files for different
webpages are analyzed. These log files contain information about the
page ranks and the page visits of the different webpages. The picture
below gives the schema of the the data to be analyzed and the
corresponding SQL query. The data is split into three relations:

-   Docs (URL, content)
-   Ranks (rank, URL, average duration)
-   Visits (IP address, URL, date, advertising revenue, …)

The analysis task computes the ranking information of all documents that
contain a certain set of keywords, have at least a certain rank, and
have not been visited in a certain year.

[![](media/wiki/weblog_taskdescription.png)](media/wiki/weblog_taskdescription.png "weblog_taskdescription.png")

PACT Program
------------

The weblog analysis example PACT program is implemented in the following
Java class:
[eu.stratosphere.pact.example.relational.WebLogAnalysis.java](https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/relational/WebLogAnalysis.java "https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/relational/WebLogAnalysis.java")
in the pact-examples module.

[![](media/wiki/weblog_pactprogram.png)](media/wiki/weblog_pactprogram.png "weblog_pactprogram.png")

1.  Each relation is read by a separate DataSource contract. Each line
    is converted into a key-value-pair.
2.  The local predicates on each relation are applied by a Map contract.
3.  The Match contract performs the equality join between the docs and
    ranks relations.
4.  The anti join between the (docs JOIN ranks) and visits relations is
    performed by the CoGroup contract. Tuples of the ranks relation are
    forwarded if no tuple of the visits relation has the same key (url).
5.  The result is written by the final DataSink contract.

Program Arguments
-----------------

Five arguments must be provided to the `getPlan()` method of the example
job:

1.  `int noSubStasks`: Degree of parallelism for all tasks.
2.  `String docs`: Path to the docs relation.
3.  `String ranks`: Path to the ranks relation.
4.  `String visits`: Path to the visits relation.
5.  `String outputPath`: Destination path for the result.

See
[here](executepactprogram.html "executepactprogram")
for details on how to specify paths for Nephele.

Data Generator
--------------

There are two generators which can provide data for the web-log analysis
PACT example.

1.  A stand-alone generator for smaller data sets.
2.  A distributed generator for larger data sets.

Both generators produce identically structured test data.

### Stand-Alone Generator

We provide a data set generator to generate the docs, ranks, and visits
relations. The generator is implemented as Java class
[eu.stratosphere.pact.example.relational.generator.WebLogGenerator.java](https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/relational/generator/WebLogGenerator.java "https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/relational/generator/WebLogGenerator.java")
in the pact-examples module.   
 The parameters of the main method of the generator are:

-   noDocuments: Number of generated doc and rank records.
-   noVisits: Number of generated visit records.
-   outPath: Path the where generated files are written.
-   noFiles: Number of files into which all relations are split.

The data generated by our stand-alone generator follows only the schema
of the distributed generator. Attribute values, distributions, and
correlations are not the same.   

Please consult the in-line JavaDocs for further information on the
generator.

### Distributed Generator

For generating larger data sets in a distributed environment, you can
use a generator provided by [Brown
University](http://database.cs.brown.edu/projects/mapreduce-vs-dbms/ "http://database.cs.brown.edu/projects/mapreduce-vs-dbms/")
(see Section “Analysis Benchmarks Data Sets”).
