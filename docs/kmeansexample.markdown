---
layout: documentation
---
K-Means Iteration
=================

The source code of this example can be found
[here](https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/datamining/KMeansIteration.java "https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/datamining/KMeansIteration.java").

Task description
----------------

The k-means cluster algorithm is a well-known algorithm to group data
points in to clusters of similar points. In contrast to hierarchical
cluster algorithms, the number of cluster centers has to be provided to
the algorithm before it is started. K-means is an iterative algorithm,
which means that certain steps are repeatably performed until a
termination criterion is fulfilled.

The algorithm operates in five steps (see figure below):

1.  Starting point: A set of data points which shall be clustered is
    provided. A data point is a vector of features. A set of initial
    cluster centers is required as well. Cluster centers are feature
    vectors as well. The initial centers are randomly generated, fixed,
    or randomly picked from the set of data points. Finally, a distance
    metric that computes the distance between a data point and a cluster
    center is required.
2.  Compute Distances: An iteration starts with computing the distances
    of all data points to all cluster centers.
3.  Find Nearest Cluster: Each data point is assigned to the cluster
    center to which it is closest according to the computed distance.
4.  Recompute Center Positions: Each cluster center is moved to the
    center of all data points which were assigned to it.
5.  Check Termination Criterion: There are multiple different
    termination criteria such as a fixed number of iterations, a limit
    on the average distance the cluster centers have moved, or a
    combination of both. If the termination criteria was met, the
    algorithm terminates. Otherwise, it goes back to step 2 and uses the
    new cluster centers as input.

[![](media/wiki/k-means_taskdescription.png)](media/wiki/k-means_taskdescription.png "wiki:k-means_taskdescription.png")

A detailed discussion of the K-Means clustering algorithm can be found
here:
[http://en.wikipedia.org/wiki/K-means\_clustering](http://en.wikipedia.org/wiki/K-means_clustering "http://en.wikipedia.org/wiki/K-means_clustering")

PACT Program
------------

The example PACT program implements one iteration step (steps 2,3, and
4) of the k-means algorithm. The implementation resides in the following
Java class:
[eu.stratosphere.pact.example.datamining.KMeansIteration.java](https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/datamining/KMeansIteration.java "https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/datamining/KMeansIteration.java")
in the pact-examples module. All required classes (data types, data
formats, PACT stubs, etc.) are contained in this class as static inline
classes.

The PACT program that implements the k-means iteration is shown in the
figure below. The implementation follows the same steps as presented
above. We discuss the program top-down in “flow direction” of the data.

-   It starts at two data sources (!DataPoints and ClusterCenters) at
    the top. Both sources produce key-value pairs from their input files
    (stored in HDFS) where the ID is the key and the coordinates of the
    data point or cluster center is the value.   

Since it is assumed, that IDs are unique in both files, both data
sources are annotated with `UniqueKey` OutputContracts.

-   A Cross PACT is used to compute the distances of all data points to
    all cluster centers. The user code (highlighted as leaf green box)
    implements the distance computation of a single data point to a
    single cluster center. The Cross PACT takes care of enumerating all
    combinations of data points and cluster centers and calls the user
    code with each combination. The user code emits key-value pairs
    where the ID of the data point is the key (hence the `SameKeyLeft`
    OutputContract is attached). The value consists of a record that
    contains the coordinates of the data point, the ID of the cluster
    center, and the computed distance.

-   We identify the cluster center that is closest to each data point
    with a Reduce PACT. The output key-value pairs of the Cross PACT
    have the ID of the data points as key. Hence, all records (with
    distance and cluster center ID) that belong to a data point are
    grouped together. These records are handed to the user code where
    the record with the minimal distance is identified. This is a
    minimum aggregation and offers the potential use of a Combiner which
    performs partial aggregations. The key-value pairs that are
    generated by the user code have the ID of the closest cluster center
    as key and the coordinates of the data point as value.

-   The computation of the new cluster center positions is done with
    another Reduce PACT. Since its input has cluster center IDs as keys,
    all pairs that belong to the same center are grouped and handed to
    the user code. Here the average of all data point coordinates is
    computed. Again this average computation can be improved by
    providing a partially aggregating Combiner that computes a count and
    a coordinate sum. The user code emits for each cluster center a
    single record that contains its ID and its new position.

-   Finally, the DataSink (new ClusterCenters) writes the results back
    into the HDFS.

[![](media/wiki/k-means_pactprogram.png)](media/wiki/k-means_pactprogram.png "k-means_pactprogram.png")

As already mentioned, the PACT program only covers steps 2, 3, and 4.
The evaluation of the termination criterion and the iterative call of
the PACT program can be done by an external control program.

Program Arguments
-----------------

Four arguments must be provided to the `getPlan()` method of the example
job:

1.  `int noSubStasks`: Degree of parallelism of all tasks.
2.  `String dataPoints`: Path to the input data points.
3.  `String clusterCenters`: Path to the input cluster centers.
4.  `String outputPath`: Destination path for the result.

See
[here](executepactprogram.html "executepactprogram")
for details on how to specify paths for Nephele.

Data Generator
--------------

We provide a data set generator to generate data points and cluster
centers input files. The generator is implemented as Java class:
[eu.stratosphere.pact.example.datamining.generator.KMeansGenerator.java](https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/datamining/generator/KMeansGenerator.java "https://github.com/stratosphere/stratosphere/blob/master/pact/pact-examples/src/main/java/eu/stratosphere/pact/example/datamining/generator/KMeansGenerator.java")
in the pact-examples module.   
 The parameters of the main method of the generator are:

-   numberOfDataPoints: The amount of data points to be generated.
-   numberOfDataPointFiles: The amount of files in which the data points
    are written.
-   numberOfClusterCenters: The amount of cluster centers to be
    generated.
-   outputDir: The directory where the output files are generated.

Please consult the in-line JavaDocs for further information on the
generator.
